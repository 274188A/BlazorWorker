@page "/"
@inject IJSRuntime jsRuntime
@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.Demo.Shared
@using BlazorWorker.Core

<h1>Hello, world!</h1>

Welcome to your new multithreaded app.

<br/>
<input type="text" @bind="fiboNumber" placeholder="fibonacci number" />
<button @onclick="OnClick">Fibonacci in a new thread</button>
<br />
<br />
Output:
<br />
<pre>
@output
</pre>
@code {
    long fiboNumber = 10;
    string output;
    IWorkerBackgroundService<FibonacciService> backgroundService;

    public async Task OnClick(EventArgs _)
    {
        output = "";
        var rn = Environment.NewLine;
        try
        {
            if (backgroundService == null)
            {
                output = "Creating background service...";
                StateHasChanged();
                var workerFactory = new BlazorWorker.Core.WorkerProxy(jsRuntime);

                backgroundService = await workerFactory.CreateBackgroundServiceAsync<FibonacciService>(
                    new WorkerInitOptions()
                    {
                        DependentAssemblyFilenames = new[] { "BlazorWorker.Demo.Shared.dll" }
                    });

                await backgroundService.RegisterEventListenerAsync<long>(nameof(FibonacciService.Fibbo),
                    (s, fb) =>
                    {
                        
                        output += $"{rn}{DateTime.Now.Ticks} EventListener got value {fb}";
                        StateHasChanged();
                    });

                StateHasChanged();
                output += $"{DateTime.Now.Ticks} Background service created.";
            }

            var f = fiboNumber;

            backgroundService.RunAsync(s => s.Fibonacci(f)).ContinueWith(t => { 
                output += $"{rn}{DateTime.Now.Ticks} Fib({fiboNumber}) = {t.Result}";
                StateHasChanged();
            });

            //output += $"{rn}{DateTime.Now} Fib({fiboNumber}) = {await backgroundService.RunAsync(s => s.Fibonacci(f))}";
        }
        catch (Exception e)
        {
            output = $"{rn}Error = {e}";
        }
    }
}
