@page "/"
@inject IWorkerFactory workerFactory

@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.Demo.Shared
@using BlazorWorker.Core

<h1>Hello, threads!</h1>

Welcome to your new multithreaded app.

<br/>
<input type="text" @bind="piIterations" placeholder="pi length" />
<button @onclick="OnClick">Estimate pi</button>

<button disabled="@disabled" @onclick="OnDispose">Dispose Service</button>
<br/>
<progress max="@piIterations" value="@piProgress" />
<br />
<br />
Output:
<br />
<pre>
@output
</pre>
@code {
    int piIterations = 5_000_000;
    int piProgress = 0;
    string output;
    IWorker worker;
    IWorkerBackgroundService<MathsService> backgroundService;
    string disabled = "disabled";


    public async Task OnClick(EventArgs _)
    {
        output = "";
        var rn = Environment.NewLine;
        try
        {
            if (worker == null)
            {
                worker = await workerFactory.CreateAsync();
            }

            if (backgroundService == null)
            {
                disabled = null;
                output = $"{rn}{LogDate()} Creating background service...";
                StateHasChanged();

                backgroundService = await worker.CreateBackgroundServiceAsync<MathsService>();

                await backgroundService.RegisterEventListenerAsync(nameof(MathsService.Pi),
                    (object s, int pinum) =>
                    {
                        piProgress = pinum;
                        StateHasChanged();
                    });


                output += $"{rn}{LogDate()} Background service created.";
                StateHasChanged();
            }

            var localParamValue = piIterations;

            output += $"{rn}{LogDate()} Calling EstimatePI({piIterations})...";
            var __ = backgroundService.RunAsync(s => s.EstimatePI(localParamValue)).ContinueWith(t =>
            {
                output += $"{rn}{LogDate()} EstimatePI({piIterations}) = {t.Result}";
                StateHasChanged();
            });
        }
        catch (Exception e)
        {
            output = $"{rn}Error = {e}";
        }
    }

    public async Task OnDispose()
    {
        await backgroundService.DisposeAsync();
        backgroundService = null;
        

        await worker.DisposeAsync();
        worker = null;

        disabled = "disabled";
    }

    private string LogDate() {
        return DateTime.Now.ToString("HH:mm:ss:fff");
    }
}
